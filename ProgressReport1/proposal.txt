Team: Jatin Ganhotra <ganhotr2@illinois.edu>, Ashwini Joshi <ajoshi11@illinois.edu>

Problem: The aim of the project to explore - How often do people revert their code? We will be developing techniques to detect the reverts in the repository and then analyze how often these reverts happen. This is an interesting area for research as
 unlike the past, developers today commit their changes very frequently 
into the local repository, without pushing them to the central server.
Later on, when the complete set of changes are done, the developer can
cherry pick/ merge some commits out of the total set of commits.
This also indicates that reverting/ignoring unwanted (or subset of) code
changes is easier for developer. Also, reverts are frequent when the
 requirements are not clear in the beginning. 
Doing revert analysis will provide insight into how many developers do
revert code and how often they do so.

Proposed solution: Version control systems such as Git or SVN maintain
the state of changes across the entire project. Using the meta-data
stored in Git, (.git folder), such as SHA values of each revision, one
can find if the current state of the project matches with one of the
previous states. If this happens, this shows that the developer reverted the recent changes. Another way to check for reverts could be using changes in the tests 
being run. Assuming new tests were added for a new class C, but later on 
all the tests for the class were removed.

Evaluation: The tool that we'll develop will be run on multiple open
source projects from Github. A detailed comparitive analysis will be
carried out about the trends of reverts done by developers. The data
obtained from the above tasks, intuitively, may provide insights about
developer coding trends and how well are the design specifications articulated for a particular project.
Another important area where such trends would matter is the size/
changes in the test suite for such cases.

Initial steps: We will be first analyzing some open source project repositories to find out whether the patterns of DIFFs can be used to detect reverts.
We will analyze the difference between forward and reverse  DIFFs
i.e. when you revert a commit, the changes are reverse of what the
changes were when that commit was made. This can be strengthened by
using information from Commit messages, which may point to the SHA of
the commit reverted back.
The diff could be a complete match, or a partial diff which could mean
that the commit is a likely revert with some cosmetic changes, and not
semantic changes.

>> As per our meeting, your proposal looks quite fine. Based on the results from the initial steps, we can see how to proceed. I expect that within two weeks you can automate the finding of reverts (at least full matches if not partial matches) and run it on at least three codebases with at least 100 SHAs each. Please let me know right away if the suggested amount looks too high, including these numbers.

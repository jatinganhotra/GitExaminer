require 'rubygems'
require 'logger'
require 'rugged'
require 'git'
require 'awesome_print'

# Include diff, difffile classes
load 'diff.rb'
load 'difffile.rb'
load 'helper.rb'

# Global array to store all the diffs
diffs_array = []

# Initialize both libraries
v1 = ARGV[0]
puts v1
working_dir = v1
#working_dir = `pwd`.chomp
rubygit_gem_repo = Git.open(working_dir, :log => Logger.new(STDOUT))
rugged_repo = Rugged::Repository.new(working_dir)

# Get all the commits for the project
commit_list = rubygit_gem_repo.log(nil)

# Get the initial empty tree state
empty_tree=`git hash-object -w -t tree /dev/null`
empty_state = rugged_repo.lookup("#{empty_tree.chomp}")

commit_list_array = commit_list.to_a
commit_list_array.reverse!
commit_list_array.insert(0, empty_state)

num_commits = commit_list_array.size
# FIXME: TODO: Change this line when code is complete
for i in 0...num_commits-1
  prev_commit = commit_list_array[i]
  next_commit = commit_list_array[i+1]
  # Special handling for empty-tree state, as it'e generated by Rugged.
  # SO, there is no sha field, rather an oid field
  if prev_commit.respond_to?("sha")
    prev_sha = prev_commit.sha
  else
    prev_sha = prev_commit.oid
  end

  next_sha = next_commit.sha
  diff_bw_commits = rubygit_gem_repo.diff(prev_sha, next_sha)

  diff = Diff.new(prev_sha, next_sha, diff_bw_commits)
  diff.generate_difffiles_and_stats
  diffs_array << diff
end

# ------------------DEBUG Messages----------------------------------
#puts commit_list_array.count
#puts diffs_array.count

#DEBUG_LOGGER(diffs_array)

#puts "Jatin"
#puts diffs_array[0].difffiles[0].patch
puts diffs_array[0].stats
puts diffs_array[0].stats.class
#puts "Jatin"

#additions = (diffs_array[0].difffiles[0].patch.changes).match(/^[\+][^+][^+].*/)
#deletions = (diffs_array[0].difffiles[0].patch.changes).match(/^[\-][^-][^-].*/)
#puts "JKJKJK"
#puts "Additions are - \n" + additions.to_s

# ------------------CHECK FOR REVERTS----------------------------------

# Iterate over the array for diffs
#diffs_array.each do ||
#ap diffs_array

stats_num_reverts = 0
difffile_name_num_reverts = 0
visited = {}
diffs_array.reverse_each do |diff|
  # For each diff starting from the latest, start comparison with the first
  diffs_array.each do |cmp_diff|
    next if diff == cmp_diff #No point looking at the same diff

    #next if diff
    # Checkpoint #1 - Number of difffiles should be equal
    next if diff.num_difffiles != cmp_diff.num_difffiles

    diff_pair = [diff, cmp_diff].sort!
    #puts diff_pair
    # If you have already visited this pair, don't work again on it
    next if visited[diff_pair] == true

    visited[diff_pair] = true
    #puts "visited[diff_pair] = " + visited[diff_pair].to_s
    # Checkpoint #2 - Compare stats if they are same
    stats_match = CompareDiffStats(diff.stats, cmp_diff.stats)
    if stats_match == true
      stats_num_reverts = stats_num_reverts + 1
      puts "==================================   BEGIN ================================================"
      puts "--- STATS MATCH - Yes the stats match !! The revert commits are - "
      puts ">> The commit sha for this diff is - " + diff.next_commit_sha.to_s
      puts ">> The commit message for this diff is - " + rugged_repo.lookup("#{diff.next_commit_sha}").message
      puts ">> The reverted commit sha is - " + cmp_diff.next_commit_sha.to_s
      puts ">> The commit message for this diff is - " + rugged_repo.lookup("#{cmp_diff.next_commit_sha}").message
      puts "==================================   END  ================================================"
    end

    # Continue when the stats don't match
    next if stats_match == false

    patch_match = CompareDiffPatch(diff, cmp_diff)
    if patch_match == true
      difffile_name_num_reverts = difffile_name_num_reverts + 1
      puts "==================================   BEGIN ================================================"
      puts "--- PATCH MATCH - Yes the patches match !! The revert commits are - "
      puts ">> The commit sha for this diff is - " + diff.next_commit_sha.to_s
      puts ">> The commit message for this diff is - " + rugged_repo.lookup("#{diff.next_commit_sha}").message
      puts ">> The reverted commit sha is - " + cmp_diff.next_commit_sha.to_s
      puts ">> The commit message for this diff is - " + rugged_repo.lookup("#{cmp_diff.next_commit_sha}").message
      puts "==================================   END  ================================================"
    end
  end
end
puts "The number of reverts based on stats are = " + stats_num_reverts.to_s
puts "The number of reverts based on difffile file names are = " + difffile_name_num_reverts.to_s
